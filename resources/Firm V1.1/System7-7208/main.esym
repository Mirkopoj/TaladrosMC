D G "__PCM__" 0 90 ""5.076""
D G "__DEVICE__" 0 90 "1503"
D G "__DATE__" 0 90 ""01-feb.-23""
D G "__TIME__" 0 90 ""20:32:26""
D G "_UNICODE" 0 90 ""?""
D G "__EVAL" 0 90 ""?"" "Standard Header file for the PIC16F1503 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 37 ""
v L "value" 2 37 "int8" `55 
f B "set_tris_a" 2 37 "void(int8 value)" `54 
f N "set_tris_c" 2 38 ""
v L "value" 2 38 "int8" `57 
f B "set_tris_c" 2 38 "void(int8 value)" `56 
f N "get_tris_a" 2 39 ""
f B "get_tris_a" 2 39 "int8()" `58 
f N "get_tris_c" 2 40 ""
f B "get_tris_c" 2 40 "int8()" `59 
f N "output_a" 2 41 ""
v L "value" 2 41 "int8" `61 
f B "output_a" 2 41 "void(int8 value)" `60 
f N "output_c" 2 42 ""
v L "value" 2 42 "int8" `63 
f B "output_c" 2 42 "void(int8 value)" `62 
f N "input_a" 2 43 ""
f B "input_a" 2 43 "int8()" `64 
f N "input_c" 2 44 ""
f B "input_c" 2 44 "int8()" `65 
f N "input_change_a" 2 45 ""
f B "input_change_a" 2 45 "int8()" `66 
f N "input_change_c" 2 46 ""
f B "input_change_c" 2 46 "int8()" `67 
f N "port_a_pullups" 2 47 ""
v L "upmask" 2 47 "int8" `69 
f B "port_a_pullups" 2 47 "void(int8 upmask)" `68 
f N "port_c_pullups" 2 48 ""
v L "value" 2 48 "int8" `71 
f B "port_c_pullups" 2 48 "void(int8 value)" `70 
f N "input" 2 49 ""
v L "pin" 2 49 "int16" `73 
f B "input" 2 49 "int8(int16 pin)" `72 
f N "input_state" 2 50 ""
v L "pin" 2 50 "int16" `75 
f B "input_state" 2 50 "int8(int16 pin)" `74 
f N "output_low" 2 51 ""
v L "pin" 2 51 "int16" `77 
f B "output_low" 2 51 "void(int16 pin)" `76 
f N "output_high" 2 52 ""
v L "pin" 2 52 "int16" `79 
f B "output_high" 2 52 "void(int16 pin)" `78 
f N "output_toggle" 2 53 ""
v L "pin" 2 53 "int16" `81 
f B "output_toggle" 2 53 "void(int16 pin)" `80 
f N "output_bit" 2 54 ""
v L "pin" 2 54 "int16" `83 
v L "level" 2 54 "int8" `84 
f B "output_bit" 2 54 "void(int16 pin,int8 level)" `82 
f N "output_float" 2 55 ""
v L "pin" 2 55 "int16" `86 
f B "output_float" 2 55 "void(int16 pin)" `85 
f N "output_drive" 2 56 ""
v L "pin" 2 56 "int16" `88 
f B "output_drive" 2 56 "void(int16 pin)" `87  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 60 "96"
d G "PIN_A1" 2 61 "97"
d G "PIN_A2" 2 62 "98"
d G "PIN_A3" 2 63 "99"
d G "PIN_A4" 2 64 "100"
d G "PIN_A5" 2 65 "101"
d G "PIN_C0" 2 67 "112"
d G "PIN_C1" 2 68 "113"
d G "PIN_C2" 2 69 "114"
d G "PIN_C3" 2 70 "115"
d G "PIN_C4" 2 71 "116"
d G "PIN_C5" 2 72 "117"
d G "FALSE" 2 75 "0"
d G "TRUE" 2 76 "1"
d G "BYTE" 2 78 "int8"
d G "BOOLEAN" 2 79 "int1"
d G "getc" 2 81 "getch"
d G "fgetc" 2 82 "getch"
d G "getchar" 2 83 "getch"
d G "putc" 2 84 "putchar"
d G "fputc" 2 85 "putchar"
d G "fgets" 2 86 "gets"
d G "fputs" 2 87 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 92 ""
f B "restart_cause" 2 92 "int8()" `89 
f N "reset_cpu" 2 93 ""
f B "reset_cpu" 2 93 "void()" `90 
f N "sleep" 2 94 ""
f B "sleep" 2 94 "void()" `91  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 96 "0x3C"
d G "MCLR_FROM_POWER_UP" 2 97 "0x34"
d G "BROWNOUT_RESTART" 2 98 "0x3E"
d G "MCLR_FROM_SLEEP" 2 99 "0x27"
d G "WDT_TIMEOUT" 2 100 "0x1F"
d G "WDT_FROM_SLEEP" 2 101 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 2 102 "0x2F"
d G "MCLR_FROM_RUN" 2 103 "0x37"
d G "RESET_INSTRUCTION" 2 104 "0x3B"
d G "STACK_OVERFLOW" 2 105 "0xBF"
d G "STACK_UNDERFLOW" 2 106 "0x7F"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 113 ""
v L "mode" 2 113 "int8" `93 
f B "setup_timer_0" 2 113 "void(int8 mode)" `92 
f N "set_timer0" 2 114 ""
v L "value" 2 114 "int8" `95 
f B "set_timer0" 2 114 "void(int8 value)" `94 
f N "get_timer0" 2 115 ""
f B "get_timer0" 2 115 "int8()" `96 
f N "setup_counters" 2 116 ""
v L "mode" 2 116 "int8" `98 
v L "prescaler" 2 116 "int8" `99 
f B "setup_counters" 2 116 "void(int8 mode,int8 prescaler)" `97 
f N "set_rtcc" 2 117 ""
v L "value" 2 117 "int8" `101 
f B "set_rtcc" 2 117 "void(int8 value)" `100 
f N "get_rtcc" 2 118 ""
f B "get_rtcc" 2 118 "int8()" `102  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 120 "0"
d G "T0_EXT_L_TO_H" 2 121 "32"
d G "T0_EXT_H_TO_L" 2 122 "48"
d G "T0_DIV_1" 2 124 "8"
d G "T0_DIV_2" 2 125 "0"
d G "T0_DIV_4" 2 126 "1"
d G "T0_DIV_8" 2 127 "2"
d G "T0_DIV_16" 2 128 "3"
d G "T0_DIV_32" 2 129 "4"
d G "T0_DIV_64" 2 130 "5"
d G "T0_DIV_128" 2 131 "6"
d G "T0_DIV_256" 2 132 "7"
d G "T0_8_BIT" 2 135 "0"
d G "RTCC_INTERNAL" 2 139 "0"
d G "RTCC_EXT_L_TO_H" 2 140 "32"
d G "RTCC_EXT_H_TO_L" 2 141 "48"
d G "RTCC_DIV_1" 2 142 "8"
d G "RTCC_DIV_2" 2 143 "0"
d G "RTCC_DIV_4" 2 144 "1"
d G "RTCC_DIV_8" 2 145 "2"
d G "RTCC_DIV_16" 2 146 "3"
d G "RTCC_DIV_32" 2 147 "4"
d G "RTCC_DIV_64" 2 148 "5"
d G "RTCC_DIV_128" 2 149 "6"
d G "RTCC_DIV_256" 2 150 "7"
d G "RTCC_8_BIT" 2 151 "0"
c L "get_rtcc" 2 3 7 "FUNCTION"
f N "setup_wdt" 2 161 ""
v L "mode" 2 161 "int16" `104 
f B "setup_wdt" 2 161 "void(int16 mode)" `103 
f N "restart_wdt" 2 162 ""
f B "restart_wdt" 2 162 "void()" `105  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 164 "0x1000"
d G "WDT_OFF" 2 165 "0x2000"
d G "WDT_1MS" 2 167 "0x100"
d G "WDT_2MS" 2 168 "0x101"
d G "WDT_4MS" 2 169 "0x102"
d G "WDT_8MS" 2 170 "0x103"
d G "WDT_16MS" 2 171 "0x104"
d G "WDT_32MS" 2 172 "0x105"
d G "WDT_64MS" 2 173 "0x106"
d G "WDT_128MS" 2 174 "0x107"
d G "WDT_256MS" 2 175 "0x108"
d G "WDT_512MS" 2 176 "0x109"
d G "WDT_1S" 2 177 "0x10A"
d G "WDT_2S" 2 178 "0x10B"
d G "WDT_4S" 2 179 "0x10C"
d G "WDT_8S" 2 180 "0x10D"
d G "WDT_16S" 2 181 "0x10E"
d G "WDT_32S" 2 182 "0x10F"
d G "WDT_64S" 2 183 "0x110"
d G "WDT_128S" 2 184 "0x111"
d G "WDT_256S" 2 185 "0x112"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 190 ""
v L "mode" 2 190 "int16" `107 
f B "setup_timer_1" 2 190 "void(int16 mode)" `106 
f N "get_timer1" 2 191 ""
f B "get_timer1" 2 191 "int16()" `108 
f N "set_timer1" 2 192 ""
v L "value" 2 192 "int16" `110 
f B "set_timer1" 2 192 "void(int16 value)" `109  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 195 "0"
d G "T1_LFINTOSC" 2 196 "0xC5"
d G "T1_EXTERNAL" 2 197 "0x85"
d G "T1_EXTERNAL_SYNC" 2 198 "0x81"
d G "T1_FOSC" 2 199 "0x45"
d G "T1_INTERNAL" 2 200 "0x05"
d G "T1_ENABLE_T1OSC" 2 202 "0x08"
d G "T1_DIV_BY_1" 2 204 "0x00"
d G "T1_DIV_BY_2" 2 205 "0x10"
d G "T1_DIV_BY_4" 2 206 "0x20"
d G "T1_DIV_BY_8" 2 207 "0x30"
d G "T1_GATE" 2 209 "0x8000"
d G "T1_GATE_INVERTED" 2 210 "0xC000"
d G "T1_GATE_TOGGLE" 2 211 "0xA000"
d G "T1_GATE_SINGLE" 2 212 "0x9000"
d G "T1_GATE_TIMER0" 2 213 "0x8100"
d G "T1_GATE_COMP1" 2 214 "0x8200"
d G "T1_GATE_COMP2" 2 215 "0x8300"
d G "T1_GATE_A4" 2 217 "0"
d G "T1_GATE_A3" 2 218 "0x10000"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 223 ""
v L "mode" 2 223 "int8" `112 
v L "period" 2 223 "int8" `113 
v L "postscale" 2 223 "int8" `114 
f B "setup_timer_2" 2 223 "void(int8 mode,int8 period,int8 postscale)" `111 
f N "get_timer2" 2 224 ""
f B "get_timer2" 2 224 "int8()" `115 
f N "set_timer2" 2 225 ""
v L "value" 2 225 "int8" `117 
f B "set_timer2" 2 225 "void(int8 value)" `116  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 227 "0"
d G "T2_DIV_BY_1" 2 228 "4"
d G "T2_DIV_BY_4" 2 229 "5"
d G "T2_DIV_BY_16" 2 230 "6"
d G "T2_DIV_BY_64" 2 231 "7"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_spi" 2 236 ""
v L "mode" 2 236 "int32" `119 
f B "setup_spi" 2 236 "void(int32 mode)" `118 
f N "spi_write" 2 237 ""
v L "value" 2 237 "int8" `121 
f B "spi_write" 2 237 "void(int8 value)" `120 
f N "spi_read" 2 238 ""
f B "spi_read" 2 238 "int8()" `122 
f N "spi_read" 2 239 ""
v L "value" 2 239 "int8" `124 
f B "spi_read" 2 239 "int8(int8 value)" `123 
f N "spi_data_is_in" 2 240 ""
f B "spi_data_is_in" 2 240 "int8()" `125  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 242 "0x00"
d G "SPI_MASTER" 2 243 "0x20"
d G "SPI_SLAVE" 2 244 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 245 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 246 "0x00"
d G "SPI_CLK_DIV_4" 2 247 "0x00"
d G "SPI_CLK_DIV_16" 2 248 "0x01"
d G "SPI_CLK_DIV_64" 2 249 "0x02"
d G "SPI_CLK_T2" 2 250 "0x03"
d G "SPI_SS_DISABLED" 2 251 "0x01"
d G "SPI_SS_C3" 2 253 "0x00000"
d G "SPI_SS_A3" 2 254 "0x10000"
d G "SPI_DO_C2" 2 255 "0x00000"
d G "SPI_DO_A4" 2 256 "0x20000"
d G "SPI_XMIT_L_TO_H" 2 258 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 259 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 261 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 262 "0x8000"
d G "SPI_L_TO_H" 2 265 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 266 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 271 ""
v L "mode" 2 271 "int32" `127 
f B "setup_comparator" 2 271 "void(int32 mode)" `126  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 274 "0x00"
d G "CP1_A1_A0" 2 277 "0x8000"
d G "CP1_C1_A0" 2 278 "0x8001"
d G "CP1_C2_A0" 2 279 "0x8002"
d G "CP1_C3_A0" 2 280 "0x8003"
d G "CP1_FVR_A0" 2 281 "0x8004"
d G "CP1_A1_DAC" 2 282 "0x8010"
d G "CP1_C1_DAC" 2 283 "0x8011"
d G "CP1_C2_DAC" 2 284 "0x8012"
d G "CP1_C3_DAC" 2 285 "0x8013"
d G "CP1_FVR_DAC" 2 286 "0x8014"
d G "CP1_A1_FVR" 2 287 "0x8020"
d G "CP1_C1_FVR" 2 288 "0x8021"
d G "CP1_C2_FVR" 2 289 "0x8022"
d G "CP1_C3_FVR" 2 290 "0x8023"
d G "CP1_FVR_FVR" 2 291 "0x8024"
d G "CP1_A1_VSS" 2 292 "0x8030"
d G "CP1_C1_VSS" 2 293 "0x8031"
d G "CP1_C2_VSS" 2 294 "0x8032"
d G "CP1_C3_VSS" 2 295 "0x8033"
d G "CP1_FVR_VSS" 2 296 "0x8034"
d G "CP1_INT_L2H" 2 298 "0x0080"
d G "CP1_INT_H2L" 2 299 "0x0040"
d G "CP1_OUT_ON_A2" 2 300 "0x2000"
d G "CP1_INVERT" 2 301 "0x1000"
d G "CP1_FAST" 2 302 "0x0400"
d G "CP1_HYST" 2 303 "0x0200"
d G "CP1_SYNC" 2 304 "0x0100"
d G "CP2_A1_C0" 2 307 "0x80000000"
d G "CP2_C1_C0" 2 308 "0x80010000"
d G "CP2_C2_C0" 2 309 "0x80020000"
d G "CP2_C3_C0" 2 310 "0x80030000"
d G "CP2_FVR_C0" 2 311 "0x80040000"
d G "CP2_A1_DAC" 2 312 "0x80100000"
d G "CP2_C1_DAC" 2 313 "0x80110000"
d G "CP2_C2_DAC" 2 314 "0x80120000"
d G "CP2_C3_DAC" 2 315 "0x80130000"
d G "CP2_FVR_DAC" 2 316 "0x80140000"
d G "CP2_A1_FVR" 2 317 "0x80200000"
d G "CP2_C1_FVR" 2 318 "0x80210000"
d G "CP2_C2_FVR" 2 319 "0x80220000"
d G "CP2_C3_FVR" 2 320 "0x80230000"
d G "CP2_FVR_FVR" 2 321 "0x80240000"
d G "CP2_A1_VSS" 2 322 "0x80300000"
d G "CP2_C1_VSS" 2 323 "0x80310000"
d G "CP2_C2_VSS" 2 324 "0x80320000"
d G "CP2_C3_VSS" 2 325 "0x80330000"
d G "CP2_FVR_VSS" 2 326 "0x80340000"
d G "CP2_INT_L2H" 2 328 "0x00800000"
d G "CP2_INT_H2L" 2 329 "0x00400000"
d G "CP2_OUT_ON_C4" 2 330 "0x20000000"
d G "CP2_INVERT" 2 331 "0x10000000"
d G "CP2_FAST" 2 332 "0x04000000"
d G "CP2_HYST" 2 333 "0x02000000"
d G "CP2_SYNC" 2 334 "0x01000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 341 ""
v L "mode" 2 341 "int8" `131 
f B "setup_vref" 2 341 "void(int8 mode)" `130  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 343 "0"
d G "VREF_ON" 2 344 "0x80"
d G "VREF_ADC_OFF" 2 346 "0"
d G "VREF_ADC_1v024" 2 347 "0x81"
d G "VREF_ADC_2v048" 2 348 "0x82"
d G "VREF_ADC_4v096" 2 349 "0x83"
d G "VREF_COMP_DAC_OFF" 2 351 "0"
d G "VREF_COMP_DAC_1v024" 2 352 "0x84"
d G "VREF_COMP_DAC_2v048" 2 353 "0x88"
d G "VREF_COMP_DAC_4v096" 2 354 "0x8C"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 356 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 357 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 358 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 359 "0x10"
c L "setup_vref" 2 3 3 "FUNCTION"
f N "setup_dac" 2 364 ""
v L "mode" 2 364 "int8" `133 
f B "setup_dac" 2 364 "void(int8 mode)" `132 
f N "dac_write" 2 365 ""
v L "value" 2 365 "int8" `135 
f B "dac_write" 2 365 "void(int8 value)" `134  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 367 "0"
d G "DAC_VSS_VDD" 2 368 "0x80"
d G "DAC_VSS_VREF" 2 369 "0x84"
d G "DAC_OUTPUT1" 2 371 "0x20" "DAC voltage level outputted on DACOUT1 pin"
d G "DAC_OUTPUT2" 2 372 "0x10" "DAC voltage level outputted on DACOUT2 pin"
c L "dac_write" 2 3 3 "FUNCTION"
f N "setup_cwg" 2 377 ""
v L "mode" 2 377 "int32" `137 
v L "shutdown" 2 377 "int16" `138 
v L "dt_rising" 2 377 "int8" `139 
v L "dt_falling" 2 377 "int8" `140 
f B "setup_cwg" 2 377 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `136 
f N "cwg_restart" 2 378 ""
f B "cwg_restart" 2 378 "void()" `141 
f N "cwg_status" 2 379 ""
f B "cwg_status" 2 379 "int8()" `142  "Constants used in SETUP_CWG() first parameter are:"
d G "CWG_ENABLED" 2 381 "0x0080"
d G "CWG_DISABLED" 2 382 "0"
d G "CWG_OUTPUT_A" 2 383 "0x0020"
d G "CWG_OUTPUT_B" 2 384 "0x0040"
d G "CWG_A_INVERTED" 2 385 "0x0008"
d G "CWG_B_INVERTED" 2 386 "0x0010"
d G "CWG_CLOCK_HFINTOSC" 2 387 "0x0001"
d G "CWG_CLOCK_FOSC" 2 388 "0x0000"
d G "CWG_INPUT_C1OUT" 2 389 "0x0100"
d G "CWG_INPUT_PWM1" 2 390 "0x0200"
d G "CWG_INPUT_PWM2" 2 391 "0x0300"
d G "CWG_INPUT_PWM3" 2 392 "0x0400"
d G "CWG_INPUT_PWM4" 2 393 "0x0500"
d G "CWG_INPUT_NCO1OUT" 2 394 "0x0600"
d G "CWG_INPUT_LC1OUT" 2 395 "0x0700"
d G "CWG_NO_AUTO_SHUTDOWN" 2 399 "0"
d G "CWG_SHUTDOWN_ON_CLC2" 2 400 "0x0001"
d G "CWG_SHUTDOWN_ON_FLT" 2 401 "0x0002"
d G "CWG_SHUTDOWN_ON_COMP1" 2 402 "0x0004"
d G "CWG_AUTO_RESTART" 2 403 "0x0040"
d G "CWG_SHUTDOWN_A_INACTIVE_STATE" 2 405 "0"
d G "CWG_SHUTDOWN_A_TRISTATE" 2 406 "0x1000"
d G "CWG_SHUTDOWN_A_LOW" 2 407 "0x2000"
d G "CWG_SHUTDOWN_A_HIGH" 2 408 "0x3000"
d G "CWG_SHUTDOWN_B_INACTIVE_STATE" 2 410 "0"
d G "CWG_SHUTDOWN_B_TRISTATE" 2 411 "0x4000"
d G "CWG_SHUTDOWN_B_LOW" 2 412 "0x8000"
d G "CWG_SHUTDOWN_B_HIGH" 2 413 "0xC000"
d G "CWG_AUTO_SHUTDOWN" 2 416 "0x80"
c L "cwg_status" 2 3 5 "FUNCTION"
f N "setup_nco" 2 423 ""
v L "mode" 2 423 "int32" `144 
v L "inc_value" 2 423 "int16" `145 
f B "setup_nco" 2 423 "void(int32 mode,int16 inc_value)" `143 
f N "set_nco_inc_value" 2 424 ""
v L "value" 2 424 "int16" `147 
f B "set_nco_inc_value" 2 424 "void(int16 value)" `146 
f N "set_nco_accumulator" 2 425 ""
v L "value" 2 425 "int32" `149 
f B "set_nco_accumulator" 2 425 "void(int32 value)" `148 
f N "get_nco_accumulator" 2 426 ""
f B "get_nco_accumulator" 2 426 "int32()" `150 
f N "get_nco_inc_value" 2 427 ""
f B "get_nco_inc_value" 2 427 "int16()" `151  "Constants used in SETUP_NCO() first parameter are:"
d G "NCO_ENABLED" 2 429 "0x0080"
d G "NCO_DISABLED" 2 430 "0"
d G "NCO_OUTPUT" 2 431 "0x0040"
d G "NCO_ACTIVE_HIGH" 2 432 "0x0010"
d G "NCO_ACTIVE_LOW" 2 433 "0"
d G "NCO_PULSE_FREQ_MODE" 2 434 "0x0001"
d G "NCO_FIXED_DUTY_MODE" 2 435 "0"
d G "NCO_CLOCK_NCO1CLK" 2 437 "0x0300"
d G "NCO_CLOCK_LC1OUT" 2 438 "0x0200"
d G "NCO_CLOCK_FOSC" 2 439 "0x0100"
d G "NCO_CLOCK_HFINOSC" 2 440 "0"
d G "NCO_PULSE_WIDTH_1" 2 443 "0"
d G "NCO_PULSE_WIDTH_2" 2 444 "0x2000"
d G "NCO_PULSE_WIDTH_4" 2 445 "0x4000"
d G "NCO_PULSE_WIDTH_8" 2 446 "0x6000"
d G "NCO_PULSE_WIDTH_16" 2 447 "0x8000"
d G "NCO_PULSE_WIDTH_32" 2 448 "0xA000"
d G "NCO_PULSE_WIDTH_64" 2 449 "0xC000"
d G "NCO_PULSE_WIDTH_128" 2 450 "0xE000"
d G "NCO_NCO1_A4" 2 452 "0x10000"
d G "NCO_NCO1_C1" 2 453 "0"
c L "get_nco_inc_value" 2 3 4 "FUNCTION"
f N "setup_clc1" 2 461 ""
v L "mode" 2 461 "int32" `154 
f B "setup_clc1" 2 461 "void(int32 mode)" `153 
f N "setup_clc2" 2 462 ""
v L "mode" 2 462 "int32" `156 
f B "setup_clc2" 2 462 "void(int32 mode)" `155 
f N "clc1_setup_input" 2 463 ""
v L "input" 2 463 "int8" `158 
v L "selection" 2 463 "int8" `159 
f B "clc1_setup_input" 2 463 "void(int8 input,int8 selection)" `157 
f N "clc2_setup_input" 2 464 ""
v L "input" 2 464 "int8" `161 
v L "selection" 2 464 "int8" `162 
f B "clc2_setup_input" 2 464 "void(int8 input,int8 selection)" `160 
f N "clc1_setup_gate" 2 465 ""
v L "gate" 2 465 "int8" `164 
v L "mode" 2 465 "int16" `165 
f B "clc1_setup_gate" 2 465 "void(int8 gate,int16 mode)" `163 
f N "clc2_setup_gate" 2 466 ""
v L "gate" 2 466 "int8" `167 
v L "mode" 2 466 "int16" `168 
f B "clc2_setup_gate" 2 466 "void(int8 gate,int16 mode)" `166  "Constants used in SETUP_CLCx() are:"
d G "CLC_ENABLED" 2 468 "0x080"
d G "CLC_DISABLED" 2 469 "0"
d G "CLC_OUTPUT" 2 470 "0x040"
d G "CLC_INT_L_TO_H" 2 471 "0x010"
d G "CLC_INT_H_TO_L" 2 472 "0x008"
d G "CLC_OUTPUT_INVERTED" 2 473 "0x100"
d G "CLC_MODE_AND_OR" 2 475 "0x000"
d G "CLC_MODE_OR_XOR" 2 476 "0x001"
d G "CLC_MODE_AND" 2 477 "0x002"
d G "CLC_MODE_SR_LATCH" 2 478 "0x003"
d G "CLC_MODE_1_INPUT_D_FLIP_FLOP" 2 479 "0x004"
d G "CLC_MODE_2_INPUT_D_FLIP_FLOP" 2 480 "0x005"
d G "CLC_MODE_JK_FLIP_FLOP" 2 481 "0x006"
d G "CLC_MODE_1_INPUT_TRANSPARENT_LATCH" 2 482 "0x007"
d G "CLC_CLC1_C5" 2 484 "0x10000"
d G "CLC_CLC1_A2" 2 485 "0"
d G "CLC_INPUT_0" 2 488 "0"
d G "CLC_INPUT_1" 2 489 "0x01"
d G "CLC_INPUT_2" 2 490 "0x02"
d G "CLC_INPUT_3" 2 491 "0x03"
d G "CLC_INPUT_4" 2 492 "0x04"
d G "CLC_INPUT_5" 2 493 "0x05"
d G "CLC_INPUT_6" 2 494 "0x06"
d G "CLC_INPUT_7" 2 495 "0x07"
d G "CLC_GATE_AND" 2 499 "0x155"
d G "CLC_GATE_NAND" 2 500 "0x055"
d G "CLC_GATE_NOR" 2 501 "0x1AA"
d G "CLC_GATE_OR" 2 502 "0x0AA"
d G "CLC_GATE_CLEAR" 2 503 "0"
d G "CLC_GATE_SET" 2 504 "0x100"
d G "CLC_GATE_INVERTED_INPUT_1" 2 508 "0x001"
d G "CLC_GATE_NON_INVERTED_INPUT_1" 2 509 "0x002"
d G "CLC_GATE_INVERTED_INPUT_2" 2 510 "0x004"
d G "CLC_GATE_NON_INVERTED_INPUT_2" 2 511 "0x008"
d G "CLC_GATE_INVERTED_INPUT_3" 2 512 "0x010"
d G "CLC_GATE_NON_INVERTED_INPUT_3" 2 513 "0x020"
d G "CLC_GATE_INVERTED_INPUT_4" 2 514 "0x040"
d G "CLC_GATE_NON_INVERTED_INPUT_4" 2 515 "0x080"
d G "CLC_GATE_OUTPUT_INVERTED" 2 516 "0x100"
c L "clc2_setup_gate" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 524 ""
v L "mode" 2 524 "int8" `172 
f B "setup_oscillator" 2 524 "void(int8 mode)" `171  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 527 "0"
d G "OSC_31250" 2 528 " (2*8)"
d G "OSC_62KHZ" 2 529 " (4*8)"
d G "OSC_125KHZ" 2 530 " (5*8)"
d G "OSC_250KHZ" 2 531 " (6*8)"
d G "OSC_500KHZ" 2 532 " (7*8)"
d G "OSC_1MHZ" 2 533 " (11*8)"
d G "OSC_2MHZ" 2 534 " (12*8)"
d G "OSC_4MHZ" 2 535 " (13*8)"
d G "OSC_8MHZ" 2 536 " (14*8)"
d G "OSC_16MHZ" 2 537 " (15*8)"
d G "OSC_SOSC" 2 539 "1"
d G "OSC_INTRC" 2 540 "2"
d G "OSC_NORMAL" 2 541 "0"
c L "setup_oscillator" 2 3 3 "FUNCTION"
f N "setup_pwm1" 2 546 ""
v L "mode" 2 546 "int16" `174 
f B "setup_pwm1" 2 546 "void(int16 mode)" `173 
f N "set_pwm1_duty" 2 547 ""
v L "value" 2 547 "int16" `176 
f B "set_pwm1_duty" 2 547 "void(int16 value)" `175 
f N "setup_pwm2" 2 548 ""
v L "mode" 2 548 "int16" `178 
f B "setup_pwm2" 2 548 "void(int16 mode)" `177 
f N "set_pwm2_duty" 2 549 ""
v L "value" 2 549 "int16" `180 
f B "set_pwm2_duty" 2 549 "void(int16 value)" `179 
f N "setup_pwm3" 2 550 ""
v L "mode" 2 550 "int16" `182 
f B "setup_pwm3" 2 550 "void(int16 mode)" `181 
f N "set_pwm3_duty" 2 551 ""
v L "value" 2 551 "int16" `184 
f B "set_pwm3_duty" 2 551 "void(int16 value)" `183 
f N "setup_pwm4" 2 552 ""
v L "mode" 2 552 "int16" `186 
f B "setup_pwm4" 2 552 "void(int16 mode)" `185 
f N "set_pwm4_duty" 2 553 ""
v L "value" 2 553 "int16" `188 
f B "set_pwm4_duty" 2 553 "void(int16 value)" `187  "Constants used for SETUP_PWMx() are:"
d G "PWM_ENABLED" 2 555 "0x80"
d G "PWM_DISABLED" 2 556 "0x0400"
d G "PWM_ACTIVE_LOW" 2 558 "0x10"
d G "PWM_ACTIVE_HIGH" 2 559 "0"
d G "PWM_OUTPUT" 2 561 "0x40"
c L "set_pwm4_duty" 2 3 4 "FUNCTION"
f N "setup_adc" 2 574 ""
v L "mode" 2 574 "int16" `194 
f B "setup_adc" 2 574 "void(int16 mode)" `193 
f N "read_adc" 2 575 ""
f B "read_adc" 2 575 "int8()" `195 
f N "read_adc" 2 576 ""
v L "mode" 2 576 "int8" `197 
f B "read_adc" 2 576 "int8(int8 mode)" `196 
f N "read_adc" 2 577 ""
f G "read_adc" 2 577 "int16()" `198 
f N "read_adc" 2 578 ""
v L "mode" 2 578 "int8" `199 
f G "read_adc" 2 578 "int16(int8 mode,int32 pins)" `198 
f N "adc_done" 2 579 ""
f B "adc_done" 2 579 "int8(int8 mode,int32 pins)" `198  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 581 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 582 "0x100"
d G "ADC_CLOCK_DIV_4" 2 583 "0x40"
d G "ADC_CLOCK_DIV_8" 2 584 "0x10"
d G "ADC_CLOCK_DIV_32" 2 585 "0x20"
d G "ADC_CLOCK_DIV_16" 2 586 "0x50"
d G "ADC_CLOCK_DIV_64" 2 587 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 588 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 591 ""
v L "pins" 2 591 "int32" `200 
f B "setup_adc_ports" 2 591 "void(int32 pins)" `199 
f N "setup_adc_ports" 2 592 ""
v L "pins" 2 592 "int32" `202 
v L "reference" 2 592 "int32" `203 
f B "setup_adc_ports" 2 592 "void(int32 pins,int32 reference)" `201 
f N "set_analog_pins" 2 593 ""
v L "pin" 2 593 "int8" `205 
f B "set_analog_pins" 2 593 "void(int8 pin,*int8 _VA_LIST)" `204 
f N "setup_adc_reference" 2 594 ""
v L "reference" 2 594 "int32" `208 
f B "setup_adc_reference" 2 594 "void(int32 reference)" `207 
f N "set_adc_channel" 2 595 ""
v L "channel" 2 595 "int8" `210 
f B "set_adc_channel" 2 595 "void(int8 channel)" `209  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 599 "0x00010000" "| A0"
d G "sAN1" 2 600 "0x00020000" "| A1"
d G "sAN2" 2 601 "0x00040000" "| A2"
d G "sAN3" 2 602 "0x00100000" "| A4"
d G "sAN4" 2 603 "0x00000100" "| C0"
d G "sAN5" 2 604 "0x00000200" "| C1"
d G "sAN6" 2 605 "0x00000400" "| C2"
d G "sAN7" 2 606 "0x00000800" "| C3"
d G "NO_ANALOGS" 2 607 "0" "None"
d G "ALL_ANALOG" 2 608 "0x00170F00" "A0 A1 A2 A4 C0 C1 C2 C3"
d G "VSS_VDD" 2 611 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 612 "0x02000000" "| Range 0-VrefH"
d G "TEMPERATURE_INDICATOR" 2 616 "0x1D"
d G "DAC_CHANNEL" 2 617 "0x1E"
d G "FVR_CHANNEL" 2 618 "0x1F"
d G "ADC_START_AND_READ" 2 621 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 622 "1"
d G "ADC_READ_ONLY" 2 623 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 629 ""
v L "x" 2 629 "sint8" `212 
f B "abs" 2 629 "sint8(sint8 x)" `211 
f N "abs" 2 630 ""
v L "x" 2 630 "sint16" `214 
f B "abs" 2 630 "sint16(sint16 x)" `213 
f N "abs" 2 631 ""
v L "x" 2 631 "sint32" `216 
f B "abs" 2 631 "sint32(sint32 x)" `215 
f N "abs" 2 632 ""
v L "x" 2 632 "float" `218 
f B "abs" 2 632 "float(float x)" `217 
f N "_mul" 2 633 ""
v L "??65535" 2 633 "int8" `220 
v L "??65535" 2 633 "int8" `221 
f B "_mul" 2 633 "int16(int8 ,int8 )" `219 
f N "_mul" 2 634 ""
v L "??65535" 2 634 "sint8" `223 
v L "??65535" 2 634 "sint8" `224 
f B "_mul" 2 634 "sint16(sint8 ,sint8 )" `222 
f N "_mul" 2 635 ""
v L "??65535" 2 635 "int16" `226 
v L "??65535" 2 635 "int16" `227 
f B "_mul" 2 635 "int32(int16 ,int16 )" `225 
f N "_mul" 2 636 ""
v L "??65535" 2 636 "sint16" `229 
v L "??65535" 2 636 "sint16" `230 
f B "_mul" 2 636 "sint32(sint16 ,sint16 )" `228  "Memory Manipulation Prototypes:"
f N "read_bank" 2 639 ""
v L "bank" 2 639 "int8" `232 
v L "offset" 2 639 "int8" `233 
f B "read_bank" 2 639 "int8(int8 bank,int8 offset)" `231 
f N "write_bank" 2 640 ""
v L "bank" 2 640 "int8" `235 
v L "offset" 2 640 "int8" `236 
v L "value" 2 640 "int8" `237 
f B "write_bank" 2 640 "void(int8 bank,int8 offset,int8 value)" `234 
f N "strcpy" 2 641 ""
v L "dest" 2 641 "*int8" `239 
v L "src" 2 641 "*int8" `240 
f B "strcpy" 2 641 "void(*int8 dest,*int8 src)" `238 
f N "memset" 2 642 ""
v L "destination" 2 642 "*int8" `242 
v L "value" 2 642 "int8" `243 
v L "num" 2 642 "int16" `244 
f B "memset" 2 642 "void(*int8 destination,int8 value,int16 num)" `241 
f N "memcpy" 2 643 ""
v L "destination" 2 643 "*int8" `246 
v L "source" 2 643 "*int8" `247 
v L "num" 2 643 "int16" `248 
f B "memcpy" 2 643 "void(*int8 destination,*int8 source,int16 num)" `245  "String Prototypes:"
f N "toupper" 2 646 ""
v L "cvalue" 2 646 "int8" `250 
f B "toupper" 2 646 "int8(int8 cvalue)" `249 
f N "tolower" 2 647 ""
v L "cvalue" 2 647 "int8" `252 
f B "tolower" 2 647 "int8(int8 cvalue)" `251 
f N "sprintf" 2 648 ""
v L "string" 2 648 "*int8" `254 
v L "cstring" 2 648 "*int8" `255 
f B "sprintf" 2 648 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `253  "Data Manipulators Prototypes:"
f N "shift_left" 2 651 ""
v L "address" 2 651 "*int8" `258 
v L "bytes" 2 651 "int8" `259 
v L "value" 2 651 "int8" `260 
f B "shift_left" 2 651 "int8(*int8 address,int8 bytes,int8 value)" `257 
f N "shift_right" 2 652 ""
v L "address" 2 652 "*int8" `262 
v L "bytes" 2 652 "int8" `263 
v L "value" 2 652 "int8" `264 
f B "shift_right" 2 652 "int8(*int8 address,int8 bytes,int8 value)" `261 
f N "rotate_left" 2 653 ""
v L "address" 2 653 "*int8" `266 
v L "bytes" 2 653 "int8" `267 
f B "rotate_left" 2 653 "void(*int8 address,int8 bytes)" `265 
f N "rotate_right" 2 654 ""
v L "address" 2 654 "*int8" `269 
v L "bytes" 2 654 "int8" `270 
f B "rotate_right" 2 654 "void(*int8 address,int8 bytes)" `268 
f N "swap" 2 655 ""
v L "value" 2 655 "int8" `272 
f B "swap" 2 655 "void(int8 value)" `271 
f N "make8" 2 656 ""
v L "var" 2 656 "int16" `274 
v L "offset" 2 656 "int8" `275 
f B "make8" 2 656 "int8(int16 var,int8 offset)" `273 
f N "make8" 2 657 ""
v L "var" 2 657 "int32" `277 
v L "offset" 2 657 "int8" `278 
f B "make8" 2 657 "int8(int32 var,int8 offset)" `276 
f N "make16" 2 658 ""
v L "varhigh" 2 658 "int8" `280 
v L "varlow" 2 658 "int8" `281 
f B "make16" 2 658 "int16(int8 varhigh,int8 varlow)" `279 
f N "make32" 2 659 ""
v L "var1" 2 659 "int16" `283 
f B "make32" 2 659 "int32(int16 var1)" `282 
f N "make32" 2 660 ""
v L "var1" 2 660 "int16" `285 
v L "var2" 2 660 "int16" `286 
f B "make32" 2 660 "int32(int16 var1,int16 var2)" `284 
f N "make32" 2 661 ""
v L "var1" 2 661 "int16" `288 
v L "var2" 2 661 "int8" `289 
f B "make32" 2 661 "int32(int16 var1,int8 var2)" `287 
f N "make32" 2 662 ""
v L "var1" 2 662 "int16" `291 
v L "var2" 2 662 "int8" `292 
v L "var3" 2 662 "int8" `293 
f B "make32" 2 662 "int32(int16 var1,int8 var2,int8 var3)" `290 
f N "make32" 2 663 ""
v L "var1" 2 663 "int8" `295 
f B "make32" 2 663 "int32(int8 var1)" `294 
f N "make32" 2 664 ""
v L "var1" 2 664 "int8" `297 
v L "var2" 2 664 "int8" `298 
f B "make32" 2 664 "int32(int8 var1,int8 var2)" `296 
f N "make32" 2 665 ""
v L "var1" 2 665 "int8" `300 
v L "var2" 2 665 "int8" `301 
v L "var3" 2 665 "int8" `302 
f B "make32" 2 665 "int32(int8 var1,int8 var2,int8 var3)" `299 
f N "make32" 2 666 ""
v L "var1" 2 666 "int8" `304 
v L "var2" 2 666 "int8" `305 
v L "var3" 2 666 "int8" `306 
v L "var4" 2 666 "int8" `307 
f B "make32" 2 666 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `303 
f N "make32" 2 667 ""
v L "var1" 2 667 "int8" `309 
v L "var2" 2 667 "int16" `310 
f B "make32" 2 667 "int32(int8 var1,int16 var2)" `308 
f N "make32" 2 668 ""
v L "var1" 2 668 "int8" `312 
v L "var2" 2 668 "int16" `313 
v L "var3" 2 668 "int8" `314 
f B "make32" 2 668 "int32(int8 var1,int16 var2,int8 var3)" `311 
f N "make32" 2 669 ""
v L "var1" 2 669 "int8" `316 
v L "var2" 2 669 "int8" `317 
v L "var3" 2 669 "int16" `318 
f B "make32" 2 669 "int32(int8 var1,int8 var2,int16 var3)" `315 
f N "bit_set" 2 670 ""
v L "var" 2 670 "int8" `320 
v L "bit" 2 670 "int8" `321 
f B "bit_set" 2 670 "void(int8 var,int8 bit)" `319 
f N "bit_set" 2 671 ""
v L "var" 2 671 "int16" `323 
v L "bit" 2 671 "int8" `324 
f B "bit_set" 2 671 "void(int16 var,int8 bit)" `322 
f N "bit_set" 2 672 ""
v L "var" 2 672 "int32" `326 
v L "bit" 2 672 "int8" `327 
f B "bit_set" 2 672 "void(int32 var,int8 bit)" `325 
f N "bit_clear" 2 673 ""
v L "var" 2 673 "int8" `329 
v L "bit" 2 673 "int8" `330 
f B "bit_clear" 2 673 "void(int8 var,int8 bit)" `328 
f N "bit_clear" 2 674 ""
v L "var" 2 674 "int16" `332 
v L "bit" 2 674 "int8" `333 
f B "bit_clear" 2 674 "void(int16 var,int8 bit)" `331 
f N "bit_clear" 2 675 ""
v L "var" 2 675 "int32" `335 
v L "bit" 2 675 "int8" `336 
f B "bit_clear" 2 675 "void(int32 var,int8 bit)" `334 
f N "bit_test" 2 676 ""
v L "var" 2 676 "int8" `338 
v L "bit" 2 676 "int8" `339 
f B "bit_test" 2 676 "int8(int8 var,int8 bit)" `337 
f N "bit_test" 2 677 ""
v L "var" 2 677 "int16" `341 
v L "bit" 2 677 "int8" `342 
f B "bit_test" 2 677 "int8(int16 var,int8 bit)" `340 
f N "bit_test" 2 678 ""
v L "var" 2 678 "int32" `344 
v L "bit" 2 678 "int8" `345 
f B "bit_test" 2 678 "int8(int32 var,int8 bit)" `343  "#use delay() Prototypes:"
f N "delay_cycles" 2 681 ""
v L "count" 2 681 "int8" `347 
f B "delay_cycles" 2 681 "void(int8 count)" `346 
f N "delay_ms" 2 682 ""
v L "time" 2 682 "int16" `349 
f B "delay_ms" 2 682 "void(int16 time)" `348 
f N "delay_us" 2 683 ""
v L "time" 2 683 "int16" `351 
f B "delay_us" 2 683 "void(int16 time)" `350  "#use rs232() Prototypes:"
f N "putchar" 2 686 ""
v L "cdata" 2 686 "int8" `353 
f B "putchar" 2 686 "void(int8 cdata)" `352 
f N "putchar" 2 687 ""
v L "cdata" 2 687 "int8" `355 
v L "stream" 2 687 "int8" `356 
f B "putchar" 2 687 "void(int8 cdata,int8 stream)" `354 
f N "puts" 2 688 ""
v L "string" 2 688 "*int8" `358 
f B "puts" 2 688 "void(*int8 string)" `357 
f N "puts" 2 689 ""
v L "string" 2 689 "*int8" `360 
v L "stream" 2 689 "int8" `361 
f B "puts" 2 689 "void(*int8 string,int8 stream)" `359 
f N "getch" 2 690 ""
f B "getch" 2 690 "int8()" `362 
f N "getch" 2 691 ""
v L "stream" 2 691 "int8" `364 
f B "getch" 2 691 "int8(int8 stream)" `363 
f N "gets" 2 692 ""
v L "string" 2 692 "*int8" `366 
f B "gets" 2 692 "void(*int8 string)" `365 
f N "gets" 2 693 ""
v L "string" 2 693 "*int8" `368 
v L "stream" 2 693 "int8" `369 
f B "gets" 2 693 "void(*int8 string,int8 stream)" `367 
f N "kbhit" 2 694 ""
f B "kbhit" 2 694 "int8()" `370 
f N "kbhit" 2 695 ""
v L "stream" 2 695 "int8" `372 
f B "kbhit" 2 695 "int8(int8 stream)" `371 
f N "printf" 2 696 ""
v L "string" 2 696 "*int8" `374 
f B "printf" 2 696 "void(*int8 string,*int8 _VA_LIST)" `373 
f N "fprintf" 2 697 ""
v L "stream" 2 697 "int8" `377 
v L "string" 2 697 "*int8" `378 
f B "fprintf" 2 697 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `376 
f N "putc_send" 2 698 ""
f B "putc_send" 2 698 "void()" `380 
f N "fputc_send" 2 699 ""
v L "stream" 2 699 "int8" `382 
f B "fputc_send" 2 699 "void(int8 stream)" `381 
f N "rcv_buffer_full" 2 700 ""
f B "rcv_buffer_full" 2 700 "int8()" `383 
f N "rcv_buffer_full" 2 701 ""
v L "stream" 2 701 "int8" `385 
f B "rcv_buffer_full" 2 701 "int8(int8 stream)" `384 
f N "rcv_buffer_bytes" 2 702 ""
f B "rcv_buffer_bytes" 2 702 "int16()" `386 
f N "rcv_buffer_bytes" 2 703 ""
v L "stream" 2 703 "int8" `388 
f B "rcv_buffer_bytes" 2 703 "int16(int8 stream)" `387 
f N "tx_buffer_full" 2 704 ""
f B "tx_buffer_full" 2 704 "int8()" `389 
f N "tx_buffer_full" 2 705 ""
v L "stream" 2 705 "int8" `391 
f B "tx_buffer_full" 2 705 "int8(int8 stream)" `390 
f N "tx_buffer_bytes" 2 706 ""
f B "tx_buffer_bytes" 2 706 "int16()" `392 
f N "tx_buffer_bytes" 2 707 ""
v L "stream" 2 707 "int8" `394 
f B "tx_buffer_bytes" 2 707 "int16(int8 stream)" `393  "#use i2c() Prototypes:"
f N "i2c_read" 2 710 ""
f B "i2c_read" 2 710 "int8()" `395 
f N "i2c_read" 2 711 ""
v L "ack" 2 711 "int8" `397 
f B "i2c_read" 2 711 "int8(int8 ack)" `396 
f N "i2c_read" 2 712 ""
v L "stream" 2 712 "int8" `399 
v L "ack" 2 712 "int8" `400 
f B "i2c_read" 2 712 "int8(int8 stream,int8 ack)" `398 
f N "i2c_write" 2 713 ""
v L "data" 2 713 "int8" `402 
f B "i2c_write" 2 713 "int8(int8 data)" `401 
f N "i2c_write" 2 714 ""
v L "stream" 2 714 "int8" `404 
v L "data" 2 714 "int8" `405 
f B "i2c_write" 2 714 "int8(int8 stream,int8 data)" `403 
f N "i2c_start" 2 715 ""
f B "i2c_start" 2 715 "void()" `406 
f N "i2c_start" 2 716 ""
v L "stream" 2 716 "int8" `408 
f B "i2c_start" 2 716 "void(int8 stream)" `407 
f N "i2c_start" 2 717 ""
v L "stream" 2 717 "int8" `410 
v L "restart" 2 717 "int8" `411 
f B "i2c_start" 2 717 "void(int8 stream,int8 restart)" `409 
f N "i2c_stop" 2 718 ""
f B "i2c_stop" 2 718 "void()" `412 
f N "i2c_stop" 2 719 ""
v L "stream" 2 719 "int8" `414 
f B "i2c_stop" 2 719 "void(int8 stream)" `413 
f N "i2c_isr_state" 2 720 ""
f B "i2c_isr_state" 2 720 "int8()" `415 
f N "i2c_slaveaddr" 2 721 ""
v L "addr" 2 721 "int8" `417 
f B "i2c_slaveaddr" 2 721 "void(int8 addr)" `416 
f N "i2c_slaveaddr" 2 722 ""
v L "stream" 2 722 "int8" `419 
v L "addr" 2 722 "int8" `420 
f B "i2c_slaveaddr" 2 722 "void(int8 stream,int8 addr)" `418 
f N "i2c_poll" 2 723 ""
f B "i2c_poll" 2 723 "int8()" `421 
f N "i2c_poll" 2 724 ""
v L "stream" 2 724 "int8" `423 
f B "i2c_poll" 2 724 "int8(int8 stream)" `422 
f N "i2c_init" 2 725 ""
v L "baud" 2 725 "int32" `425 
f B "i2c_init" 2 725 "void(int32 baud)" `424 
f N "i2c_init" 2 726 ""
v L "stream" 2 726 "int8" `427 
v L "baud" 2 726 "int32" `428 
f B "i2c_init" 2 726 "void(int8 stream,int32 baud)" `426 
f N "i2c_transfer" 2 727 ""
v L "address" 2 727 "int8" `430 
v L "wData" 2 727 "*int8" `431 
v L "wCount" 2 727 "int8" `432 
f B "i2c_transfer" 2 727 "void(int8 address,*int8 wData,int8 wCount)" `429 
f N "i2c_transfer" 2 728 ""
v L "address" 2 728 "int8" `434 
v L "wData" 2 728 "*int8" `435 
v L "wCount" 2 728 "int8" `436 
v L "rData" 2 728 "*int8" `437 
v L "rCount" 2 728 "*int8" `438 
f B "i2c_transfer" 2 728 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `433 
f N "i2c_transfer" 2 729 ""
v L "stream" 2 729 "int8" `440 
v L "address" 2 729 "int8" `441 
v L "wData" 2 729 "*int8" `442 
v L "wCount" 2 729 "int8" `443 
f B "i2c_transfer" 2 729 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `439 
f N "i2c_transfer" 2 730 ""
v L "stream" 2 730 "int8" `445 
v L "address" 2 730 "int8" `446 
v L "wData" 2 730 "*int8" `447 
v L "wCount" 2 730 "int8" `448 
v L "rData" 2 730 "*int8" `449 
v L "rCount" 2 730 "*int8" `450 
f B "i2c_transfer" 2 730 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `444 
f N "i2c_transfer_out" 2 731 ""
v L "address" 2 731 "int8" `452 
v L "wData" 2 731 "*int8" `453 
v L "wCount" 2 731 "int8" `454 
f B "i2c_transfer_out" 2 731 "void(int8 address,*int8 wData,int8 wCount)" `451 
f N "i2c_transfer_out" 2 732 ""
v L "stream" 2 732 "int8" `456 
v L "address" 2 732 "int8" `457 
v L "wData" 2 732 "*int8" `458 
v L "wCount" 2 732 "int8" `459 
f B "i2c_transfer_out" 2 732 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `455 
f N "i2c_transfer_in" 2 733 ""
v L "address" 2 733 "int8" `461 
v L "rData" 2 733 "*int8" `462 
v L "rCount" 2 733 "int8" `463 
f B "i2c_transfer_in" 2 733 "void(int8 address,*int8 rData,int8 rCount)" `460 
f N "i2c_transfer_in" 2 734 ""
v L "stream" 2 734 "int8" `465 
v L "address" 2 734 "int8" `466 
v L "rData" 2 734 "*int8" `467 
v L "rCount" 2 734 "int8" `468 
f B "i2c_transfer_in" 2 734 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `464  "#use spi() Prototypes:"
f N "spi_xfer" 2 737 ""
f B "spi_xfer" 2 737 "int8()" `469 
f N "spi_xfer" 2 738 ""
f G "spi_xfer" 2 738 "int16(int8 data)" `470 
f N "spi_xfer" 2 739 ""
f G "spi_xfer" 2 739 "int32(int8 data)" `470 
f N "spi_xfer" 2 740 ""
v L "data" 2 740 "int8" `471 
f B "spi_xfer" 2 740 "int8(int8 data)" `470 
f N "spi_xfer" 2 741 ""
v L "data" 2 741 "int16" `473 
f B "spi_xfer" 2 741 "int16(int16 data)" `472 
f N "spi_xfer" 2 742 ""
v L "data" 2 742 "int32" `475 
f B "spi_xfer" 2 742 "int32(int32 data)" `474 
f N "spi_xfer" 2 743 ""
v L "stream" 2 743 "int8" `477 
v L "data" 2 743 "int8" `478 
f B "spi_xfer" 2 743 "int8(int8 stream,int8 data)" `476 
f N "spi_xfer" 2 744 ""
v L "stream" 2 744 "int8" `480 
v L "data" 2 744 "int16" `481 
f B "spi_xfer" 2 744 "int16(int8 stream,int16 data)" `479 
f N "spi_xfer" 2 745 ""
v L "stream" 2 745 "int8" `483 
v L "data" 2 745 "int32" `484 
f B "spi_xfer" 2 745 "int32(int8 stream,int32 data)" `482 
f N "spi_xfer" 2 746 ""
v L "stream" 2 746 "int8" `486 
v L "data" 2 746 "int8" `487 
v L "bits" 2 746 "int8" `488 
f B "spi_xfer" 2 746 "int8(int8 stream,int8 data,int8 bits)" `485 
f N "spi_xfer" 2 747 ""
v L "stream" 2 747 "int8" `490 
v L "data" 2 747 "int16" `491 
v L "bits" 2 747 "int8" `492 
f B "spi_xfer" 2 747 "int16(int8 stream,int16 data,int8 bits)" `489 
f N "spi_xfer" 2 748 ""
v L "stream" 2 748 "int8" `494 
v L "data" 2 748 "int32" `495 
v L "bits" 2 748 "int8" `496 
f B "spi_xfer" 2 748 "int32(int8 stream,int32 data,int8 bits)" `493 
f N "spi_init" 2 749 ""
v L "baud" 2 749 "int32" `498 
f B "spi_init" 2 749 "void(int32 baud)" `497 
f N "spi_init" 2 750 ""
v L "stream" 2 750 "int8" `500 
v L "baud" 2 750 "int32" `501 
f B "spi_init" 2 750 "void(int8 stream,int32 baud)" `499 
f N "spi_speed" 2 751 ""
v L "baud" 2 751 "int32" `503 
f B "spi_speed" 2 751 "void(int32 baud)" `502 
f N "spi_speed" 2 752 ""
v L "stream" 2 752 "int8" `505 
v L "baud" 2 752 "int32" `506 
f B "spi_speed" 2 752 "void(int8 stream,int32 baud)" `504 
f N "spi_speed" 2 753 ""
v L "stream" 2 753 "int8" `508 
v L "baud" 2 753 "int32" `509 
v L "clock" 2 753 "int32" `510 
f B "spi_speed" 2 753 "void(int8 stream,int32 baud,int32 clock)" `507 
f N "spi_prewrite" 2 754 ""
v L "data" 2 754 "int8" `512 
f B "spi_prewrite" 2 754 "void(int8 data)" `511 
f N "spi_prewrite" 2 755 ""
v L "data" 2 755 "int16" `514 
f B "spi_prewrite" 2 755 "void(int16 data)" `513 
f N "spi_prewrite" 2 756 ""
v L "data" 2 756 "int32" `516 
f B "spi_prewrite" 2 756 "void(int32 data)" `515 
f N "spi_prewrite" 2 757 ""
v L "??65535" 2 757 "int8" `518 
v L "data" 2 757 "int8" `519 
f B "spi_prewrite" 2 757 "void(int8 ,int8 data)" `517 
f N "spi_prewrite" 2 758 ""
v L "??65535" 2 758 "int8" `521 
v L "data" 2 758 "int16" `522 
f B "spi_prewrite" 2 758 "void(int8 ,int16 data)" `520 
f N "spi_prewrite" 2 759 ""
v L "??65535" 2 759 "int8" `524 
v L "data" 2 759 "int32" `525 
f B "spi_prewrite" 2 759 "void(int8 ,int32 data)" `523 
f N "spi_xfer_in" 2 760 ""
f B "spi_xfer_in" 2 760 "int8()" `526 
f N "spi_xfer_in" 2 761 ""
f G "spi_xfer_in" 2 761 "int16(int8 bits)" `527 
f N "spi_xfer_in" 2 762 ""
f G "spi_xfer_in" 2 762 "int32(int8 bits)" `527 
f N "spi_xfer_in" 2 763 ""
v L "bits" 2 763 "int8" `528 
f B "spi_xfer_in" 2 763 "int8(int8 bits)" `527 
f N "spi_xfer_in" 2 764 ""
v L "bits" 2 764 "int8" `530 
f G "spi_xfer_in" 2 764 "int16(int8 bits,int8 bits)" `529 
f N "spi_xfer_in" 2 765 ""
v L "bits" 2 765 "int8" `530 
f G "spi_xfer_in" 2 765 "int32(int8 bits,int8 bits)" `529 
f N "spi_xfer_in" 2 766 ""
v L "stream" 2 766 "int8" `530 
v L "bits" 2 766 "int8" `531 
f B "spi_xfer_in" 2 766 "int8(int8 stream,int8 bits)" `529 
f N "spi_xfer_in" 2 767 ""
v L "stream" 2 767 "int8" `530 
v L "bits" 2 767 "int8" `534 
f G "spi_xfer_in" 2 767 "int16(int8 stream,int8 bits,int8 task)" `532 
f N "spi_xfer_in" 2 768 ""
v L "stream" 2 768 "int8" `530 
v L "bits" 2 768 "int8" `534 
f G "spi_xfer_in" 2 768 "int32(int8 stream,int8 bits,int8 task)" `532  "#use rtos() Prototypes:"
f N "rtos_run" 2 771 ""
f B "rtos_run" 2 771 "void(int8 stream,int8 bits,int8 task)" `532 
f N "rtos_yield" 2 772 ""
f B "rtos_yield" 2 772 "void(int8 bits,int8 task)" `533 
f N "rtos_enable" 2 773 ""
v L "task" 2 773 "int8" `535 
f B "rtos_enable" 2 773 "void(int8 task)" `534 
f N "rtos_disable" 2 774 ""
v L "task" 2 774 "int8" `537 
f B "rtos_disable" 2 774 "void(int8 task)" `536 
f N "rtos_terminate" 2 775 ""
f B "rtos_terminate" 2 775 "void()" `538 
f N "rtos_await" 2 776 ""
v L "flag" 2 776 "int8" `540 
f B "rtos_await" 2 776 "void(int8 flag)" `539 
f N "rtos_wait" 2 777 ""
v L "sem" 2 777 "int8" `542 
f B "rtos_wait" 2 777 "void(int8 sem)" `541 
f N "rtos_signal" 2 778 ""
v L "sem" 2 778 "int8" `544 
f B "rtos_signal" 2 778 "void(int8 sem)" `543 
f N "rtos_msg_send" 2 779 ""
v L "task" 2 779 "int8" `546 
v L "msg" 2 779 "int8" `547 
f B "rtos_msg_send" 2 779 "void(int8 task,int8 msg)" `545 
f N "rtos_msg_read" 2 780 ""
f B "rtos_msg_read" 2 780 "int8()" `548 
f N "rtos_msg_poll" 2 781 ""
f B "rtos_msg_poll" 2 781 "int8()" `549 
f N "rtos_overrun" 2 782 ""
v L "task" 2 782 "int8" `551 
f B "rtos_overrun" 2 782 "int8(int8 task)" `550 
f N "rtos_stats" 2 783 ""
v L "task" 2 783 "int8" `553 
v L "stat" 2 783 "*int8" `554 
f B "rtos_stats" 2 783 "void(int8 task,*int8 stat)" `552  "#use timer() Prototypes:"
f N "get_ticks" 2 786 ""
f B "get_ticks" 2 786 "int8()" `555 
f N "get_ticks" 2 787 ""
f G "get_ticks" 2 787 "int16(int8 stream)" `556 
f N "get_ticks" 2 788 ""
f G "get_ticks" 2 788 "int32(int8 stream)" `556 
f N "get_ticks" 2 789 ""
v L "stream" 2 789 "int8" `557 
f B "get_ticks" 2 789 "int8(int8 stream)" `556 
f N "get_ticks" 2 790 ""
v L "stream" 2 790 "int8" `559 
f G "get_ticks" 2 790 "int16(int8 stream)" `558 
f N "get_ticks" 2 791 ""
v L "stream" 2 791 "int8" `559 
f G "get_ticks" 2 791 "int32(int8 stream)" `558 
f N "set_ticks" 2 792 ""
v L "value" 2 792 "int8" `559 
f B "set_ticks" 2 792 "void(int8 value)" `558 
f N "set_ticks" 2 793 ""
v L "value" 2 793 "int16" `561 
f B "set_ticks" 2 793 "void(int16 value)" `560 
f N "set_ticks" 2 794 ""
v L "value" 2 794 "int32" `563 
f B "set_ticks" 2 794 "void(int32 value)" `562 
f N "set_ticks" 2 795 ""
v L "stream" 2 795 "int8" `565 
v L "value" 2 795 "int8" `566 
f B "set_ticks" 2 795 "void(int8 stream,int8 value)" `564 
f N "set_ticks" 2 796 ""
v L "stream" 2 796 "int8" `568 
v L "value" 2 796 "int16" `569 
f B "set_ticks" 2 796 "void(int8 stream,int16 value)" `567 
f N "set_ticks" 2 797 ""
v L "stream" 2 797 "int8" `571 
v L "value" 2 797 "int32" `572 
f B "set_ticks" 2 797 "void(int8 stream,int32 value)" `570  "#use pwm() Prototypes:"
f N "pwm_on" 2 800 ""
f B "pwm_on" 2 800 "void()" `573 
f N "pwm_on" 2 801 ""
v L "stream" 2 801 "int8" `575 
f B "pwm_on" 2 801 "void(int8 stream)" `574 
f N "pwm_off" 2 802 ""
f B "pwm_off" 2 802 "void()" `576 
f N "pwm_off" 2 803 ""
v L "stream" 2 803 "int8" `578 
f B "pwm_off" 2 803 "void(int8 stream)" `577 
f N "pwm_set_duty" 2 804 ""
v L "duty" 2 804 "int16" `580 
f B "pwm_set_duty" 2 804 "void(int16 duty)" `579 
f N "pwm_set_duty" 2 805 ""
v L "stream" 2 805 "int8" `582 
v L "duty" 2 805 "int16" `583 
f B "pwm_set_duty" 2 805 "void(int8 stream,int16 duty)" `581 
f N "pwm_set_duty_percent" 2 806 ""
v L "percent" 2 806 "int16" `585 
f B "pwm_set_duty_percent" 2 806 "void(int16 percent)" `584 
f N "pwm_set_duty_percent" 2 807 ""
v L "stream" 2 807 "int8" `587 
v L "percent" 2 807 "int16" `588 
f B "pwm_set_duty_percent" 2 807 "void(int8 stream,int16 percent)" `586 
f N "pwm_set_frequency" 2 808 ""
v L "frequency" 2 808 "int32" `590 
f B "pwm_set_frequency" 2 808 "void(int32 frequency)" `589 
f N "pwm_set_frequency" 2 809 ""
v L "stream" 2 809 "int8" `592 
v L "frequency" 2 809 "int32" `593 
f B "pwm_set_frequency" 2 809 "void(int8 stream,int32 frequency)" `591  "#use capture() Prototypes:"
f N "get_capture_time" 2 812 ""
f B "get_capture_time" 2 812 "int16()" `594 
f N "get_capture_time" 2 813 ""
v L "stream" 2 813 "int8" `596 
f B "get_capture_time" 2 813 "int16(int8 stream)" `595 
f N "get_capture_event" 2 814 ""
f B "get_capture_event" 2 814 "int8()" `597 
f N "get_capture_event" 2 815 ""
v L "stream" 2 815 "int8" `599 
f B "get_capture_event" 2 815 "int8(int8 stream)" `598  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 828 ""
v L "address" 2 828 "int16" `601 
f B "goto_address" 2 828 "void(int16 address)" `600 
f N "label_address" 2 829 ""
v L "label" 2 829 "int16" `603 
f B "label_address" 2 829 "int16(int16 label)" `602  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 832 ""
v L "address" 2 832 "int16" `605 
v L "dataptr" 2 832 "*int8" `606 
v L "count" 2 832 "int16" `607 
f B "read_program_memory" 2 832 "void(int16 address,*int8 dataptr,int16 count)" `604 
f N "read_program_eeprom" 2 833 ""
v L "address" 2 833 "int16" `609 
f B "read_program_eeprom" 2 833 "int16(int16 address)" `608 
f N "read_configuration_memory" 2 834 ""
v L "dataptr" 2 834 "*int8" `611 
v L "count" 2 834 "int8" `612 
f B "read_configuration_memory" 2 834 "void(*int8 dataptr,int8 count)" `610 
f N "read_configuration_memory" 2 835 ""
v L "offset" 2 835 "int8" `614 
v L "dataptr" 2 835 "*int8" `615 
v L "count" 2 835 "int8" `616 
f B "read_configuration_memory" 2 835 "void(int8 offset,*int8 dataptr,int8 count)" `613  "Program Memory Write Prototypes:"
f N "write_program_memory" 2 838 ""
v L "address" 2 838 "int16" `618 
v L "dataptr" 2 838 "*int8" `619 
v L "count" 2 838 "int16" `620 
f B "write_program_memory" 2 838 "void(int16 address,*int8 dataptr,int16 count)" `617 
f N "write_program_eeprom" 2 839 ""
v L "address" 2 839 "int16" `622 
v L "data" 2 839 "int16" `623 
f B "write_program_eeprom" 2 839 "void(int16 address,int16 data)" `621 
f N "write_configuration_memory" 2 840 ""
v L "dataptr" 2 840 "*int8" `625 
v L "count" 2 840 "int8" `626 
f B "write_configuration_memory" 2 840 "void(*int8 dataptr,int8 count)" `624 
f N "write_configuration_memory" 2 841 ""
v L "offset" 2 841 "int8" `628 
v L "dataptr" 2 841 "*int8" `629 
v L "count" 2 841 "int8" `630 
f B "write_configuration_memory" 2 841 "void(int8 offset,*int8 dataptr,int8 count)" `627  "INT"
c L "write_configuration_memory" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 848 ""
v L "interrupt" 2 848 "int32" `632 
f B "enable_interrupts" 2 848 "void(int32 interrupt)" `631 
f N "disable_interrupts" 2 849 ""
v L "interrupt" 2 849 "int32" `634 
f B "disable_interrupts" 2 849 "void(int32 interrupt)" `633 
f N "clear_interrupt" 2 850 ""
v L "interrupt" 2 850 "int32" `636 
f B "clear_interrupt" 2 850 "void(int32 interrupt)" `635 
f N "interrupt_active" 2 851 ""
v L "interrupt" 2 851 "int32" `638 
f B "interrupt_active" 2 851 "int8(int32 interrupt)" `637 
f N "interrupt_enabled" 2 852 ""
v L "interrupt" 2 852 "int32" `640 
f B "interrupt_enabled" 2 852 "int8(int32 interrupt)" `639 
f N "ext_int_edge" 2 853 ""
v L "source" 2 853 "int8" `642 
v L "edge" 2 853 "int8" `643 
f B "ext_int_edge" 2 853 "void(int8 source,int8 edge)" `641 
f N "jump_to_isr" 2 854 ""
v L "address" 2 854 "int16" `645 
f B "jump_to_isr" 2 854 "void(int16 address)" `644  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 856 "0x40"
d G "H_TO_L" 2 857 "0"
d G "GLOBAL" 2 859 "0x0BC0"
d G "PERIPH" 2 860 "0x0B40"
d G "INT_EXT_L2H" 2 861 "0x50000B10"
d G "INT_EXT_H2L" 2 862 "0x60000B10"
d G "INT_EXT" 2 863 "0x300B10"
d G "INT_TIMER0" 2 864 "0x300B20"
d G "INT_TIMER1" 2 865 "0x309101"
d G "INT_TIMER2" 2 866 "0x309102"
d G "INT_SSP" 2 867 "0x309108"
d G "INT_AD" 2 868 "0x309140"
d G "INT_TIMER1_GATE" 2 869 "0x309180"
d G "INT_BUSCOL" 2 870 "0x309208"
d G "INT_COMP" 2 871 "0x309220"
d G "INT_COMP2" 2 872 "0x309240"
d G "INT_NCO" 2 873 "0x309204"
d G "INT_CLC" 2 874 "0x309301"
d G "INT_CLC2" 2 875 "0x309302"
d G "INT_CLC3" 2 876 "0x309304"
d G "INT_CLC4" 2 877 "0x309308"
d G "INT_IOC" 2 878 "0x3FFF0B08"
d G "INT_IOC_A0" 2 879 "0x30010B08"
d G "INT_IOC_A0_L2H" 2 880 "0x10010B08"
d G "INT_IOC_A0_H2L" 2 881 "0x20010B08"
d G "INT_IOC_A1" 2 882 "0x30020B08"
d G "INT_IOC_A1_L2H" 2 883 "0x10020B08"
d G "INT_IOC_A1_H2L" 2 884 "0x20020B08"
d G "INT_IOC_A2" 2 885 "0x30040B08"
d G "INT_IOC_A2_L2H" 2 886 "0x10040B08"
d G "INT_IOC_A2_H2L" 2 887 "0x20040B08"
d G "INT_IOC_A3" 2 888 "0x30080B08"
d G "INT_IOC_A3_L2H" 2 889 "0x10080B08"
d G "INT_IOC_A3_H2L" 2 890 "0x20080B08"
d G "INT_IOC_A4" 2 891 "0x30100B08"
d G "INT_IOC_A4_L2H" 2 892 "0x10100B08"
d G "INT_IOC_A4_H2L" 2 893 "0x20100B08"
d G "INT_IOC_A5" 2 894 "0x30200B08"
d G "INT_IOC_A5_L2H" 2 895 "0x10200B08"
d G "INT_IOC_A5_H2L" 2 896 "0x20200B08"
d G "INT_RA" 2 903 "0x30FF0B08"
d G "INT_RA0" 2 904 "0x30010B08"
d G "INT_RA0_L2H" 2 905 "0x10010B08"
d G "INT_RA0_H2L" 2 906 "0x20010B08"
d G "INT_RA1" 2 907 "0x30020B08"
d G "INT_RA1_L2H" 2 908 "0x10020B08"
d G "INT_RA1_H2L" 2 909 "0x20020B08"
d G "INT_RA2" 2 910 "0x30040B08"
d G "INT_RA2_L2H" 2 911 "0x10040B08"
d G "INT_RA2_H2L" 2 912 "0x20040B08"
d G "INT_RA3" 2 913 "0x30080B08"
d G "INT_RA3_L2H" 2 914 "0x10080B08"
d G "INT_RA3_H2L" 2 915 "0x20080B08"
d G "INT_RA4" 2 916 "0x30100B08"
d G "INT_RA4_L2H" 2 917 "0x10100B08"
d G "INT_RA4_H2L" 2 918 "0x20100B08"
d G "INT_RA5" 2 919 "0x30200B08"
d G "INT_RA5_L2H" 2 920 "0x10200B08"
d G "INT_RA5_H2L" 2 921 "0x20200B08"
V G "DCmin" 0 3 "int16" `650 
V G "DCmaxCW" 0 4 "int16" `652 
V G "DCmaxCCW" 0 5 "int16" `654 
V G "dc" 0 7 "int16" `656 
V G "C1" 0 8 "int16" `657 
V G "C2" 0 8 "int16" `658 
V G "C1i" 0 8 "int16" `659 
V G "C2i" 0 8 "int16" `660 
V G "C1s" 0 9 "int16" `661 
V G "C2s" 0 10 "int16" `662 
F N "main" 0 12 ""
F G "main" 0 13 "void()" `663 
C L "main" 0 17 1 "FUNCTION"
V L "i" 0 25 "int8" `666 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_c_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_pwm1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_pwm2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_pwm3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_pwm4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_cwg" 4 0
F B "cwg_status" 0 0
F B "cwg_restart" 0 0
F B "setup_nco" 2 0
F B "set_nco_accumulator" 1 0
F B "get_nco_accumulator" 0 0
F B "set_nco_inc_value" 1 0
F B "get_nco_inc_value" 0 0
F B "setup_clc1" 1 0
F B "clc1_setup_gate" 2 0
F B "clc1_setup_input" 2 0
F B "setup_clc2" 1 0
F B "clc2_setup_gate" 2 0
F B "clc2_setup_input" 2 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
